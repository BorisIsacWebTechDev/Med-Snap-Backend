# Generated by Django 5.1.3 on 2025-02-20 08:46

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BasicCustomEmployee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(null=True)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('contact_number', models.CharField(max_length=20, null=True)),
                ('gender', models.CharField(choices=[('Click to select', 'Click to select'), ('Male', 'Male'), ('Female', 'Female')], default='Click to select', max_length=20)),
                ('role', models.CharField(choices=[('Click to select', 'Click to select'), ('Doctor', 'Doctor'), ('Receptionist', 'Receptionist'), ('It Dev', 'It Dev')], default='Click to select', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='%(app_label)s_%(class)s_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='%(app_label)s_%(class)s_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DrClinicalEmployee',
            fields=[
                ('basiccustomemployee_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('medical_order_id', models.CharField(max_length=50, unique=True)),
                ('specialty_type', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Dr',
                'verbose_name_plural': "Dr's",
            },
            bases=('employees.basiccustomemployee',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ReceptionsClinicalEmployee',
            fields=[
                ('basiccustomemployee_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'receptionist',
                'verbose_name_plural': 'receptionists',
            },
            bases=('employees.basiccustomemployee',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SingleCustomUser',
            fields=[
                ('drclinicalemployee_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='employees.drclinicalemployee')),
                ('user_type', models.CharField(choices=[('single', 'Single User'), ('hospital', 'Hospital User')], default='single', max_length=10)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            bases=('employees.drclinicalemployee',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='HospitalUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clinical_name', models.CharField(max_length=100)),
                ('tax_id', models.CharField(max_length=50, unique=True)),
                ('clinical_type', models.CharField(choices=[('Options1', 'Options1'), ('Options2', 'Options2'), ('Options3', 'Options3'), ('Options4', 'Options4')])),
                ('country', models.CharField(max_length=50)),
                ('city', models.CharField(max_length=50)),
                ('address', models.CharField(max_length=250)),
                ('zip_code', models.CharField(max_length=10)),
                ('website', models.URLField(blank=True, null=True)),
                ('num_staff', models.CharField(choices=[('1-5', '1-5'), ('6-10', '6-10'), ('11-20', '11-20'), ('21-50', '21-50'), ('50+', '50+')], default='1-5', max_length=10, verbose_name='Num Staff')),
                ('clinical_email', models.EmailField(max_length=255, null=True)),
                ('clinical_phone', models.CharField(max_length=20, null=True)),
                ('head_physician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hospital_head_physician', to='employees.drclinicalemployee', verbose_name='')),
            ],
            options={
                'verbose_name': 'hospital',
                'verbose_name_plural': 'hospitals',
            },
        ),
    ]
